simple_tsdb
===========
simple_tsdb is a simple time-series database which supports only
"append-at-the-end" and "delete-from-the-front" operations.  These operations
are atomic, meaning that a read from the end will never return a measurement
that only has part of its fields populated, unlike some other time-series
databases.

simple_tsdb only holds the data required to satisfy outstanding operations in
memory, and relies on the OS's page cache to keep recently-used files in
memory.  This keeps simple_tsdb's memory utilization very low, allowing it to
scale to very large databases.

simple_tsdb is designed for use with streaming data, such as data that is
being continuously generated by a sensor, which is why only append operations
are supported.  To be explicit, simple_tsdb cannot go and insert measurements
somewhere in the middle of the data for a given series, nor can it modify
measurements that are already stored in the database.

Measurements are uniquely identified by the tuple (database, measurement,
series, timestamp).  A single instance of simple_tsdb can have multiple logical
databases that have different permissions.  Inside each database can be a
different set of measurements, where perhaps each measurement corresponds to a
different type of sensor.  Within the a given measurement are separate data
series, each uniquely identified by a tag which could be something like a
single sensor's serial number.  Finally, within each series the individual
measurements are uniquely identified by a timestamp with nanosecond
resolution.  Two measurements within the same series cannot have the same
timestamp (which is implied by "append-only" being the write policy).

The hierarchy might look something like this:

Database            Measurement             Series
============================================================
xdh-n-1000000-data  xtalx_data              XTI-10-1000000
                                            XTI-10-1000001
                                            ...
                    paroscientific_data     14741
============================================================
xdh-n-1000017-data  xtalx_data              XTI-10-1000001
                                            XTI-10-1000005
                                            ...
                    paroscientific_data     14741
                    mensor_data             123456
                    tincan_data             TCSC-5-20000068
                                            TCSC-5-20000069
                                            TCSC-5-20000070
============================================================
pt-1-data           moto_data               MOTO-1-3003001
                    xtalx_data              XTI-10-1000204
                                            XTI-10-1000205
                    paroscientific_data     14741
============================================================

simple_tsdb uses the host filesystem to directly map the above hierarchy into
a set of directories and files.  It would look something like this:

databases/
    xdh-n-1000000-data/
        xtalx_data/
            XTI-10-1000000/
            XTI-10-1000001/
            ...
        paroscientific_data/
            14741/
    xdh-n-1000017-data/
        xtalx_data/
            XTI-10-1000001/
            XTI-10-1000005/
            ...
        paroscientific_data/
            14741/
        mensor_data/
            123456/
        tincan_data/
            TCSC-5-2000068/
            TCSC-5-2000069/
            TCSC-5-2000070/
    pt-1-data/
        moto_data/
            MOTO-1-3003001/
        xtalx_data/
            XTI-10-1000204/
            XTI-10-1000205/
        paroscientific_data/
            14741/

Within the directory for each series can be found another set of directories,
this time with one directory for each field in the measurement.  For instance,
and XtalX sensor may have fields for pressure in PSI, temperature in C, as
well as oscillator frequencies for pressure and temperature in Hz.  Each
measurement is also identified by its timestamp in nanoseconds since the
epoch.  We might have the following fields:

databases/
    xdh-n-1000000-data/
        XTI-10-1000000/
            time_ns,u64/
            pressure_psi,f64/
            temperature_c,f32/
            pressure_hz,f64/
            temperature_hz,f64/

The individual field directories all have files which contain the raw
measurements.  The files in these directories are named according to the first
timestamp in the file, and the file names are mirrored in each directory.  In
a single measurement some fields may be NULL and this is recorded using the
*_null files in each directory (other than the time_ns directory, since a
measurement's timestamp can never be NULL):

databases/
    xdh-n-1000000-data/
        XTI-10-1000000/
            time_ns,u64/
                1741052645419315000
                1741052730093922048
            pressure_psi,f64/
                1741052645419315000
                1741052645419315000_null
                1741052730093922048
                1741052730093922048_null
            temperature_c,f32/
                1741052645419315000
                1741052645419315000_null
                1741052730093922048
                1741052730093922048_null
            pressure_hz,f64/
                1741052645419315000
                1741052645419315000_null
                1741052730093922048
                1741052730093922048_null
            temperature_hz,f64/
                1741052645419315000
                1741052645419315000_null
                1741052730093922048
                1741052730093922048_null

Each timestamp file under each field directory contains the same number of
measurements.  Timestamp files grow up to a fixed maximum size of 2M for a
64-bit field.  Once a file fills up, new measurements spill over into a new
timestamp file according to the timestamp of the next measurement appended to
the series.  Full timestamp files will be gzip-compressed to save space and
they become read-only.

Along with the field directories found in a series directory, one can also
find a metadata file for the entire series.  The metadata file contains the
timestamps of the first and last measurements in the series.  When appending
new data to the series, the measurement(s) are first written to the individual
field timestamp files (creating new ones if necessary) and then the metadata
file's "last timestamp" value is updated.  Likewise, when deleting data from
the front of a series, the "first timestamp" value will be incremented and
then any timestamp files that no longer contain live data will be deleted.
