# Copyright (c) 2020 by Terry Greeniaus.  All rights reserved.

# List of target binaries to build.
# Each target, T, should provide the following fields in their module.mk file:
# 	T.REQ_DEFS - list of required linker variables
# 	T.LIB      - list of .a dependencies
# 	T.OBJ      - list of .o dependencies
# 	T.LD       - linker file to use
TARGETS := \
	tsdbcli2 \
	tsdbclienttest \
	tsdbserver \
	tsdbtest

# Build options.
OPT_LEVEL := -O2

# Where to install binaries.
INSTALL_DIR := /usr/local/bin
INSTALL_BINS := \
	tsdbcli2 \
	tsdbserver

# Standard directories.
SRC_DIR     := src
BIN_DIR     := bin
BUILD_DIR   := build
THIRD_PARTY := third_party

# Root modules.
MODULES := $(sort $(wildcard $(SRC_DIR)/*))
MODULES := $(MODULES:$(SRC_DIR)/%=%)

# Directories to delete when cleaning.
CLEAN_DIRS := $(BIN_DIR) $(BUILD_DIR)

# Build directories.
BUILD_O_DIR  := $(BUILD_DIR)/obj
BUILD_TO_DIR := $(BUILD_DIR)/objt
LIB_DIR      := $(BUILD_DIR)/lib
INCLUDE_DIR  := $(BUILD_DIR)/include
TESTS_DIR    := $(BUILD_DIR)/unittests

# Architecture flags.
ARCH_FLAGS :=

# Target C++ flags.
COMMON_CXXFLAGS := \
	$(OPT_LEVEL) \
	-std=gnu++20 \
	-ggdb \
	-gstrict-dwarf \
	-fno-math-errno \
	-freciprocal-math \
	-fno-signed-zeros \
	-Wall \
	-Werror \
	-Wundef \
	-Wno-invalid-offsetof \
	-Wno-c99-designator \
	-fno-use-cxa-atexit \
	-ffunction-sections \
	-fdata-sections \
	-D_GNU_SOURCE \
	-I$(SRC_DIR) \
	-I$(INCLUDE_DIR) \
	-I$(THIRD_PARTY)

# Unittest C++ flags.
TEST_CXXFLAGS := \
	$(OPT_LEVEL) \
	-std=gnu++20 \
	-Wall \
	-Werror \
	-Wno-invalid-offsetof \
	-Wno-multichar \
	-ggdb \
	-ffunction-sections \
	-fdata-sections \
	-DUNITTEST \
	-I$(SRC_DIR) \
	-I$(INCLUDE_DIR) \
	-I$(THIRD_PARTY)

# OS-specific include directories.
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S), Darwin)
	COMMON_CXXFLAGS += -I$(HOMEBREW_PREFIX)/opt/openssl/include
	TEST_CXXFLAGS += -I$(HOMEBREW_PREFIX)/opt/openssl/include
endif

# Flags for archive tool
ARFLAGS = rc

# Target build tools.
GCC_PREFIX := /usr/bin/
GCC_CC     := $(GCC_PREFIX)gcc
GCC_CXX    := $(GCC_PREFIX)g++
GCC_STRIP  := $(GCC_PREFIX)strip
GCC_AS     := $(GCC_PREFIX)as
GCC_LD     := $(GCC_PREFIX)ld
GCC_AR     := $(GCC_PREFIX)ar

# Native build tools for unittests.
TEST_CXX   := /usr/bin/g++

# Test directories and expected outputs.
TEST_RES_DIR := $(TESTS_DIR)/.results
ALL_TESTS    :=

# Create the GIT commit version header.
$(shell scripts/make_version.sh $(INCLUDE_DIR))

# Rule to build everything.
.PHONY: all
all: $(TARGETS:%=$(BIN_DIR)/%) test
	@:

# Rule to clean everything.
.PHONY: clean
clean:
	@rm -rf $(CLEAN_DIRS)
	@find . -name "*.pyc" | xargs rm 2>/dev/null || true

# Rule to build everything and install binaries.
.PHONY: install
install: all
	sudo cp $(INSTALL_BINS:%=$(BIN_DIR)/%) $(INSTALL_DIR)/

# Rule to build an object file from a %.cc file.
# We can't use $^ for the list of source files because that will also pull in
# all the other header dependencies generated by the .d files.
$(BUILD_O_DIR)/%.o: $(SRC_DIR)/%.cc Makefile | version headers
	@echo Compiling object $(SRC_DIR)/$*.cc...
	@mkdir -p $(dir $@)
	@$(GCC_CXX) \
		-MMD \
		-MP \
		-MF $(BUILD_O_DIR)/$*.d \
		-c \
		$(COMMON_CXXFLAGS) \
		$(SRC_DIR)/$*.cc \
		-o $@

ifneq ($(MAKECMDGOALS),clean)
# Defines for building libraries.
-include scripts/libs.mk

# Rules for third-party code.
-include scripts/third_party.mk

# Pull in all of the defined modules.
-include scripts/modules.mk
$(call include_modules,$(MODULES),)

# Rules for making unittests using tmock.
-include scripts/test_defs.mk
$(call define_all_tests)

# Define a build rule for each target.
-include scripts/targets.mk
$(call define_target_rules,$(TARGETS))

# Rules for making header directory symlinks.
-include scripts/headers.mk

# Rule to execute all tests.
-include scripts/tests.mk
endif
